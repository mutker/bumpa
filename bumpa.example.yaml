logging:
  environment: development
  environments:
    - name: development
      timeformat: "2006-01-02T15:04:05Z07:00" # RFC3339
      output: console
      level: debug
    - name: production
      level: info
      timeformat: "2006-01-02T15:04:05Z07:00" # RFC3339
      output: file
      file_path: "bumpa.log"
      file_perms: 0644

llm:
  provider: openai-compatible
  model: llama3.1:latest
  base_url: http://localhost:11434/v1
  # api_key: optional, only needed for some providers like OpenAI or Groq
  max_retries: 3
  request_timeout: 30s
  commit_msg_timeout: 30s

git:
  include_gitignore: true
  ignore:
    - "go.mod"
    - "go.sum"
    - "*.log"
    - "TODO.md"
  max_diff_lines: 10
  preferred_line_length: 72 # Standard git commit message length

tools:
  - name: "generate_file_summary"
    type: "function"
    function:
      name: "generate_file_summary"
      description: "Analyze git file changes and provide a concise summary"
      parameters:
        type: "object"
        properties:
          file:
            type: "string"
            description: "The path of the file"
          status:
            type: "string"
            description: "The git status of the file"
            enum: ["A", "M", "D", "R", "C"] # Standard git status codes
          diff:
            type: "string"
            description: "The git diff content"
          hasSignificantChanges:
            type: "boolean"
            description: "Whether there are significant non-import changes"
        required: ["file", "status", "diff", "hasSignificantChanges"]
    system_prompt: |
      You are a code review assistant specializing in summarizing Git changes.
      Your task is to analyze changes and provide clear, informative summaries.

      Rules:
      1. Provide a clear, concise, single-sentence summary
      2. Focus on what changed, not how or why
      3. For significant changes, describe the main functionality change
      4. For minor changes, use phrases like "minor improvements" or "formatting updates"
      5. Never suggest improvements or alternatives
      6. Keep summaries factual and objective

      Examples:
      - "Add user authentication middleware with JWT support"
      - "Update logging format to include trace IDs"
      - "Minor formatting improvements and comment updates"
    user_prompt: |
      Provide a concise summary of the following file changes:
      File: {{.file}}
      Status: {{.status}}
      Changes:
      {{.diff}}

  - name: "generate_commit_message"
    type: "function"
    function:
      name: "generate_commit_message"
      description: "Generate a conventional commit message"
      parameters:
        type: "object"
        properties:
          summary:
            type: "string"
            description: "Summary of all file changes"
          branch:
            type: "string"
            description: "The current git branch name"
        required: ["summary", "branch"]
    system_prompt: |
      You are a Conventional Commits expert. Generate a commit message following these exact rules:

      Header format (MUST BE): type(scope): description
      Example: fix(errors): improve error handling and validation

      Rules:
      1. Type MUST be one of:
         feat|fix|docs|style|refactor|perf|test|chore|ci|build
      2. Scope MUST be:
         - In parentheses
         - Lowercase
         - Single word or hyphenated
         - Related to the primary component being changed
      3. Description MUST be:
         - Separated from type(scope) by ": " (colon and single space)
         - Lowercase
         - No period at end
         - Under 72 chars total
         - Use imperative: "add" not "added"
         - Clear and concise

      For multiple file changes:
      1. Header summarizes primary change
      2. Add body after two newlines
      3. Group related changes in body
      4. Example:
         fix(config): improve error handling and validation

         * config: add validation for required fields
         * errors: centralize error definitions
         * logger: improve error context logging

         Additional updates:
         * Update linter configuration
         * Fix formatting in various files
    user_prompt: |
      Generate a commit message following the exact format above:
      Branch: {{.branch}}

      Changes:
      {{.summary}}

  - name: "retry_commit_message"
    type: "function"
    function:
      name: "retry_commit_message"
      description: "Generate a commit message, learning from previous invalid attempt"
      parameters:
        type: "object"
        properties:
          summary:
            type: "string"
            description: "Summary of all file changes"
          branch:
            type: "string"
            description: "The current git branch name"
          previous:
            type: "string"
            description: "The previous invalid commit message"
          error:
            type: "string"
            description: "The reason the previous attempt was invalid"
        required: ["summary", "branch", "previous", "error"]
    system_prompt: |
      You are a Conventional Commits expert. Previous attempt failed: {{.error}}

      CRITICAL RULES:
      1. TOTAL header length MUST be under 72 chars
      2. Format MUST be: type(scope): description
         - Exactly ONE space after colon
         - No space before colon
      3. Type MUST be one of: feat|fix|docs|style|refactor|perf|test|chore|ci|build
      4. Scope MUST be single word, lowercase component name
      5. Description MUST be under 40 chars

      Character count examples:
      refactor(llm): update message structure     # 39 chars ✓
      fix(errors): improve handling patterns      # 41 chars ✓
      style(config): reorganize fields           # 35 chars ✓

      Previous attempts (invalid):
      {{.previous}}                              # Too long/wrong format

      Focus on MOST IMPORTANT change only!
      - Use shortest clear scope
      - Keep description brief but clear
      - Count total characters before submitting
    user_prompt: |
      Generate a short, focused commit message for the MAIN change only.
      Branch: {{.branch}}

      Primary changes (pick one):
      {{.summary}}
