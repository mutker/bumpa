logging:
  environment: development
  timeformat: "RFC3339"
  output: console
  level: debug

llm:
  provider: openai
  model: llama3-groq-70b-8192-tool-use-preview
  base_url: https://api.groq.com/openai/v1
  api_key: gsk_xxx
  max_retries: 3

git:
  include_gitignore: true
  ignore:
    - "go.mod"
    - "go.sum"
    - "*.log"
    - "TODO.md"
  max_diff_lines: 10

tools:
  - name: "analyze_file_changes"
    description: |
      Summarize the changes to a file in one short sentence.
      Focus on the key modifications, additions, or deletions, and ignore any changes such as added, removed, or sorted imports.
      NEVER provide improvements or ways to fix the code, only respond with a summary of the changes regardless of quality.
    system_prompt: |
      You are an expert code reviewer focusing on summarizing changes.
      Provide your response as plain text without any JSON formatting or tool call syntax.
      Focus on providing a clear, concise summary of the changes.
    user_prompt: |
      Analyze the following changes and provide a clear summary:
      {{.Input}}

      Remember to:
      1. Focus on the meaningful changes
      2. Be concise but descriptive
      3. Respond in plain text only
      4. Do not include any JSON or tool call formatting
    input_schema: |
      {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The path of the file"
          },
          "status": {
            "type": "string",
            "description": "The status of the file (Added, Modified, Deleted, Untracked, or Changed)"
          },
          "diff": {
            "type": "string",
            "description": "The diff of the file changes"
          },
          "hasSignificantChanges": {
            "type": "boolean",
            "description": "Indicates if there are significant changes beyond import modifications"
          }
        },
        "required": ["file", "status", "diff", "hasSignificantChanges"]
      }

  - name: "generate_commit_message"
    description: |
      Generates a single, concise, and meaningful Git commit message that strictly adheres to the Conventional Commits 1.0.0 specification.
    system_prompt: |
      You are a commit message generator that follows Conventional Commits format.
      Generate ONLY the commit message, no explanation or extra text.
      Format: type(optional-scope): description
      - type must be: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert
      - scope is optional, lowercase, in parentheses
      - description must be lowercase, no period at end
      - must be under 72 characters
    user_prompt: |
      Previous attempt was invalid ({{.Error}}).

      Branch: {{.Branch}}

      Summary of changes:
      {{.Summary}}

      Remember:
      1. ONLY output the commit message line
      2. Follow format: type(scope): description
      3. Type must be one of: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert
      4. Description must be lowercase with no period
      5. Must include colon and space after type/scope
    input_schema: |
      {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "A summary of all file changes"
          },
          "branch": {
            "type": "string",
            "description": "The current git branch name"
          },
          "error": {
            "type": "string",
            "description": "Error from previous attempt, if any"
          },
          "previous": {
            "type": "string",
            "description": "Previous attempt at generating a commit message"
          }
        },
        "required": ["summary", "branch"]
      }
