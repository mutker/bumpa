logging:
  environment: development
  timeformat: "RFC3339"
  output: console
  level: debug

# logging:
#   environment: production
#   timeformat: "TimeFormatUnix"
#   output: file
#   path: "/var/log/bumpa/bumpa.log"
#   level: info

llm:
  provider: ollama
  model: llama3.1
  base_url: "http://localhost:11434"
  api_key: "" # Ollama typically doesn't require an API key
  max_retries: 3 # If commit message is not valid, try again

# llm:
#   provider: openai
#   model: llama-3.1-70b-versatile
#   base_url: https://api.groq.com/openai/v1
#   api_key: gsk_xxx
#   max_retries: 3 # If commit message is not valid, try again

git:
  include_gitignore: true
  ignore:
    - "go.mod"
    - "go.sum"
    - "*.log"
    - "tmp/"
    - "vendor/"

templates:
  commit_message: |
    {{.Type}}{% if .Scope %}({{.Scope}}){% endif %}: {{.Description}}

    {% if .Body %}{{.Body}}{% endif %}

    {% if .Footer %}{{.Footer}}{% endif %}

tools:
  - name: generate_file_summary
    description: |
      Summarize the changes to a file in one short sentence.
      Focus on the key modifications, additions, or deletions, and ignore any changes such as added, removed, or sorted imports.
      NEVER provide improvements or ways to fix the code, only respond with a summary of the changes regardless of quality.
    input_schema: |
      {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The path of the file"
          },
          "status": {
            "type": "string",
            "description": "The status of the file (Added, Modified, Deleted, Untracked, or Changed)"
          },
          "diff": {
            "type": "string",
            "description": "The diff of the file changes"
          },
          "hasSignificantChanges": {
            "type": "boolean",
            "description": "Indicates if there are significant changes beyond import modifications"
          }
        },
        "required": ["file", "status", "diff", "hasSignificantChanges"]
      }

  - name: generate_conventional_commit
    description: |
      Generates a single, concise, and meaningful Git commit message that strictly adheres to the Conventional Commits 1.0.0 specification. This tool summarizes changes across multiple files into one commit message.

      The commit message structure is as follows:
      <type>[optional scope][!]: <description>

      [optional body]

      [optional footer(s)]

      Key rules:
      1. Commits MUST be prefixed with a type, which consists of feat, fix, or other allowed types.
      2. A scope MAY be provided after a type, within parentheses.
      3. A description MUST immediately follow the colon and space after the type/scope prefix.
      4. A longer commit body MAY be provided after the short description.
      5. A footer MAY be provided after the body, following the 'git trailer' convention.
      6. Breaking changes MUST be indicated by a '!' before the ':' or as a 'BREAKING CHANGE:' footer.

      Additional guidelines:
      - Focus on the most significant modifications and their purpose, prioritizing changes to code structure, functionality, or behavior over minor changes like import reorganizations.
      - If there are significant non-import changes, highlight those in the commit message.
      - Avoid mentioning minor changes unless they are the only changes.
      - Do not end the description with a period.
      - Consider the current branch name when generating the commit message, especially if it's a feature or bugfix branch.

      This tool helps maintain a standardized Git history, aiding in automated CHANGELOG generation and semantic versioning.
    input_schema: |
      {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "A summary of all file changes"
          },
          "branch": {
            "type": "string",
            "description": "The current git branch name"
          },
          "type": {
            "type": "string",
            "enum": ["feat", "fix", "docs", "style", "refactor", "perf", "test", "build", "ci", "chore", "revert"],
            "description": "The type of the commit"
          },
          "scope": {
            "type": "string",
            "description": "Optional scope of the commit"
          },
          "is_breaking_change": {
            "type": "boolean",
            "description": "Indicates if this commit contains breaking changes"
          },
          "description": {
            "type": "string",
            "description": "A short description of the code changes"
          },
          "body": {
            "type": "string",
            "description": "Optional longer description of the changes"
          },
          "footer": {
            "type": "string",
            "description": "Optional footer (e.g., BREAKING CHANGE explanation)"
          }
        },
        "required": ["summary", "branch"]
      }
