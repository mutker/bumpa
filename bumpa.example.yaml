logging:
  environment: development
  environments:
    - name: development
      timeformat: "2006-01-02T15:04:05Z07:00" # RFC3339
      output: console
      level: debug
    - name: production
      level: info
      timeformat: "2006-01-02T15:04:05Z07:00" # RFC3339
      output: file
      file_path: "bumpa.log"
      file_perms: 0644

llm:
  provider: openai-compatible
  model: llama3.1:latest
  base_url: http://localhost:11434/v1
  # api_key: optional
  max_retries: 3
  request_timeout: 30s
  commit_msg_timeout: 30s

git:
  include_gitignore: true
  ignore:
    - "go.mod"
    - "go.sum"
    - "*.log"
  max_diff_lines: 10
  preferred_line_length: 72 # Standard git commit message length

version:
  git:
    commit: false
    tag: true
    signage: true
  files:
    - path: "VERSION"
      replace:
        - "{version}"
    - path: "pkg/version/version.go"
      replace:
        - 'const Version = "{version}"'
    - path: "package.json"
      replace:
        - '"version": "{version}"'
    - path: "pyproject.toml"
      replace:
        - 'version = "{version}"'

functions:
  - name: "analyze_version_bump"
    description: "Analyze changes and suggest semantic version bump type and prerelease stage"
    parameters:
      type: "object"
      properties:
        current_version:
          type: "string"
          description: "Current semantic version including any prerelease suffix"
        file_changes:
          type: "string"
          description: "Summary of file changes"
        commit_history:
          type: "string"
          description: "Relevant commit messages since last version"
        breaking_keywords:
          type: "array"
          description: "Keywords indicating breaking changes"
          items:
            type: "string"
        feature_keywords:
          type: "array"
          description: "Keywords indicating new features"
          items:
            type: "string"
      required: ["current_version", "file_changes", "commit_history"]
    system_prompt: |
      You are a semantic versioning expert. Return EXACTLY ONE LINE containing the version progression suggestion.

      Valid Response Formats:
      major:alpha1
      minor:alpha1
      patch:alpha1
      alpha2
      beta1
      rc1
      stable

      NO OTHER TEXT OR EXPLANATION ALLOWED.

      Version Progression Rules:
      1. New Project Start (0.x.x):
          - Start with 0.1.0-alpha1
          - Progress through alpha/beta/rc to 0.1.0
          - Continue with 0.2.0-alpha1 for major changes

      2. Pre-1.0 Development:
          - Use alpha for initial implementation
          - Use beta for feature-complete testing
          - Use rc when preparing for release
          - Progress to stable when production-ready

      3. Post-1.0 Development:
          - Major changes start at alpha1
          - Progress through stages based on stability
          - Multiple alphas/betas allowed before rc
          - RC indicates release readiness

      Stage Transition Guidelines:
      - alpha → beta: Feature complete, needs testing
      - beta → rc: Code complete, final testing
      - rc → stable: No significant issues found
      - Stay in current stage if more work needed

      REMEMBER: Return ONLY the version suggestion, nothing else.
    user_prompt: |
      Analyze these changes and suggest version progression.
      Current version: {{.current_version}}

      File Changes:
      {{.file_changes}}

      Commit History:
      {{.commit_history}}

      Breaking change keywords: {{.breaking_keywords}}
      Feature keywords: {{.feature_keywords}}

  - name: "generate_file_summary"
    description: "Analyze git file changes and provide a concise summary"
    parameters:
      type: "object"
      properties:
        file:
          type: "string"
          description: "The path of the file"
        status:
          type: "string"
          description: "The git status of the file"
          enum: ["A", "M", "D", "R", "C"]
        diff:
          type: "string"
          description: "The git diff content"
        hasSignificantChanges:
          type: "boolean"
          description: "Whether there are significant non-import changes"
      required: ["file", "status", "diff", "hasSignificantChanges"]
    system_prompt: |
      You are a code review assistant specializing in summarizing Git changes.
      Your task is to analyze changes and provide clear, informative summaries.

      Rules:
      1. Provide a VERY concise summary under 40 characters
      2. Focus on the core change only
      3. Use simple, direct language
      4. Never include file paths
      5. Never use punctuation at the end
      6. For minor changes, use standard phrases:
            - "update logging format"
            - "improve error handling"
            - "fix formatting"
            - "update documentation"

      Examples:
        - "add JWT authentication"
        - "update logging format"
        - "improve error handling"
    user_prompt: |
      Provide a concise summary of the following file changes:
      File: {{.file}}
      Status: {{.status}}
      Changes:
      {{.diff}}

  - name: "generate_commit_message"
    description: "Generate a conventional commit message"
    parameters:
      type: "object"
      properties:
        summary:
          type: "string"
          description: "Summary of all file changes"
        branch:
          type: "string"
          description: "The current git branch name"
      required: ["summary", "branch"]
    system_prompt: |
      You are a Conventional Commits expert. Generate a commit message following these EXACT rules:

      FORMAT:
      <type>(<scope>): <description>

      WHERE:
      - type: feat|fix|docs|style|refactor|perf|test|chore|ci|build
      - scope: single lowercase word
      - description: imperative, lowercase, no period, max 40 chars

      TOTAL LENGTH MUST BE UNDER 72 CHARS

      ALWAYS use this pattern:
      1. Choose most specific type
      2. Use shortest clear scope
      3. Keep description brief

      VALID EXAMPLES:
      refactor(llm): update message handling
      fix(config): improve validation
      style(fmt): update code formatting

      REMEMBER: Exactly one space after colon, no space before colon
    user_prompt: |
      Generate a commit message following the exact format above:
      Branch: {{.branch}}

      Changes:
      {{.summary}}

  - name: "retry_commit_message"
    description: "Generate a commit message, learning from previous invalid attempt"
    parameters:
      type: "object"
      properties:
        summary:
          type: "string"
          description: "Summary of all file changes"
        branch:
          type: "string"
          description: "The current git branch name"
        previous:
          type: "string"
          description: "The previous invalid commit message"
        error:
          type: "string"
          description: "The reason the previous attempt was invalid"
      required: ["summary", "branch", "previous", "error"]
    system_prompt: |
      Previous attempt failed because: {{.error}}

      STRICT FORMAT:
      <type>(<scope>): <description>

      RULES:
      1. ALWAYS use this exact pattern
      2. NO variations allowed
      3. ONE space after colon
      4. NO space before colon
      5. Total length under 72 chars
      6. Description under 40 chars

      VALID:
      refactor(llm): update message format
      fix(log): improve error handling
      style(fmt): update formatting

      INVALID:
      refactor(llm):update format     # missing space after colon
      fix(log) : improve handling     # space before colon
      style(fmt): update all code formatting in multiple files  # too long
    user_prompt: |
      Generate a short, focused commit message for the MAIN change only.
      Branch: {{.branch}}

      Primary changes (pick one):
      {{.summary}}

      Previous attempt: {{.previous}}
      Error: {{.error}}
